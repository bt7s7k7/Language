template(T is any 0)
function printf(templ: T): Void => extern

namespace Foo {
    struct {
        value: []Char
    }

    function @invoke(value: []Char) {
        return Foo { value: value }
    }

    function @dispose(this) {
        printf(`Disposed ${this->value}`)
    }
}

template(T is any 0)
namespace SharedPtr {
    struct {
        store: SharedPtr.ValueStore[T]!*
    }

    function @dispose(this) {
        var store = this->store
        if (store == nullptr) {
            // Uninitialized, nothing to do
            printf(`sh_ptr skip`)
        } else {
            store->count = store->count - 1
            printf(`sh_ptr ${store->count}`)
            if (store->count == 0) {
                store->value->@dispose()
            }

            this->store = nullptr
        }
    }

    function clone(this) {
        var store = this->store
        if (store!as(Number) == 0) {
            //  Uninitialized, nothing to copy
            return this.*
        } else {
            store->count = store->count + 1
            return this.*
        }
    }
}

namespace of SharedPtr {
    template(T)
    namespace ValueStore {
        struct {
            value: *T
            count: Number
        }
    }

    template(T is any 0)
    function adopt(value: T) {
        var valuePtr = *T.alloc()
        valuePtr.* = value
        return SharedPtr[T] {
            store: SharedPtr.ValueStore[T]!* {
                value: valuePtr,
                count: 1
            }
        }
    }

}

function main() {
    var x!defer: SharedPtr[Foo]

    var f = 1
    if (f) {
        var y!defer = SharedPtr.adopt(Foo("alpha"))
        x = y.clone()
        printf(`Block end ${x}`)
    }

    printf(`Func end`)
}